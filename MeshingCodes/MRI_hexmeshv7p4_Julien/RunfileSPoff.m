function [mvfiles]=RunfileSPoff(outstm,meshprop,mvfiles,namefile,freqHz,outpath,default,vox,zoneprop)
viscoutputfv7p3isoincomp_noSP=[outstm  '_G' sprintf('%4.0f',meshprop.muest) '.v7.3.inv.iso.incomp.visc_SPoff_SF0p0015_CG2p2'];
viscrfilev7p3_noSP='runfile-v7p3visc.dat';
mvfiles(length(mvfiles)+1).name=viscrfilev7p3_noSP;
fid=fopen(viscrfilev7p3_noSP,'w');
fprintf(fid,'Subzone Reconstruction Data File \n');
fprintf(fid,'Problem Type <0=Forward Problem Only> <1+=Inverse Problem> \n');
fprintf(fid,'1 \n');
fprintf(fid,'Node File: \n');
fprintf(fid,'%c',namefile.nodhmgoutf);fprintf(fid,'\n');
fprintf(fid,'Element File: \n');
fprintf(fid,'%c',namefile.elmhmgf);fprintf(fid,'\n');
fprintf(fid,'Boundary Node File: \n');
fprintf(fid,'%c',namefile.bcoutf);fprintf(fid,'\n');
fprintf(fid,'Region Stack File: \n');
fprintf(fid,'%c',namefile.regoutf);fprintf(fid,'\n');
fprintf(fid,'Measured Displacement File: \n');
fprintf(fid,'1 \n');
fprintf(fid,'%10.4fd0',freqHz);fprintf(fid,'\n');
fprintf(fid,'%c',namefile.dspoutf);fprintf(fid,'\n');
fprintf(fid,'Initial Solution File: \n');
fprintf(fid,'0 \n');
fprintf(fid,'Output File Stem: \n');
fprintf(fid,'%c',outpath);fprintf(fid,'%c',viscoutputfv7p3isoincomp_noSP);fprintf(fid,'\n');
fprintf(fid,'Print Detailed Runtime Debugging and Execution Comments <verb> <file>:\n');
fprintf(fid,'.false.,.false. \n');
fprintf(fid,'Material Model <1=isotropic> <2=orthotropic> <3=iso compress>: \n');
fprintf(fid,'1 \n');
fprintf(fid,'Number of Material Properties: \n');
fprintf(fid,'3 \n');
fprintf(fid,'Material Description Style <1=nodal> <2=element> [<shear modulus> <density> <bulk modulus>]: \n');
fprintf(fid,'1,1,1 \n');
fprintf(fid,'Number of Parameters per Material Point: \n');
fprintf(fid,'1,1,1 \n');
fprintf(fid,'Property Scalars: \n');
fprintf(fid,'%5.0f.d0,%5.0f.d0,%5.0f.d0,%8.5fd0,%10.0f.d0,%7.0f.d0',...
    [meshprop.muest 2*default.DR*meshprop.muest default.rhoest -1d-1 2*meshprop.muest*(1+default.vincomp)/(3*(1-2*default.vincomp)) 0]);fprintf(fid,'\n');
fprintf(fid,'Number of Material Property Mesh Resolutions: \n');
fprintf(fid,'3 \n');
fprintf(fid,'Material Property Mesh Resolutions (x,y,z): \n');
fprintf(fid,'%9.7f , %9.7f , %9.7f \n',vox);
fprintf(fid,'%9.7f , %9.7f , %9.7f \n',5.*vox);
fprintf(fid,'%9.7f , %9.7f , %9.7f \n',10.*vox);
fprintf(fid,'Material Mesh Index (1st line real part, 2nd line imag) \n ');
fprintf(fid,'1 2 2 \n');
fprintf(fid,'1 2 2 \n');
fprintf(fid,'Reconstruction Indicators: \n');
fprintf(fid,'.true.,.true. \n');
fprintf(fid,'.false.,.false. \n');
fprintf(fid,'.false.,.false. \n');
fprintf(fid,'Property Estimate Variance Calculation: \n');
fprintf(fid,'.false. \n');
fprintf(fid,'Zone Sizes (not including overlap factor, actual size = (1+2*ovlp)*siz) [x y z]: \n');
fprintf(fid,'%12.5e,%12.5e,%12.5e',zoneprop.znedgelength);fprintf(fid,'\n');
fprintf(fid,'Zone Overlap Percentage [x y z]: \n');
fprintf(fid,'%4.3fd0,%4.3fd0,%4.3fd0',zoneprop.znovlp);fprintf(fid,'\n');
fprintf(fid,'Iteration Limits [global zone]: \n');
fprintf(fid,'100,1 \n');
fprintf(fid,'Minimum Parameter Update Size [global zone line]: \n');
fprintf(fid,'%c','0.1d0, 0.1d0, 0.1d0');fprintf(fid,'\n');
fprintf(fid,'Number of Zone Iteration Structures: \n');
fprintf(fid,'3 \n');
fprintf(fid,'Iteration Limits for Zone Iteration Structures (NOTE:  provide one less limit than # of structures!!!): \n');
fprintf(fid,'10,150 \n');
fprintf(fid,'Zone Iteration Structures [<# of CG iters> <# of GN iters> <!!! QN CURRENTLY UNAVAILABLE !!!> <# of line search iters>]: \n');
fprintf(fid,'1,0,0,1 \n');
fprintf(fid,'2,0,0,2 \n');
fprintf(fid,'3,0,0,2 \n');
fprintf(fid,'Number of Processors per MUMPS Communicator \n');
fprintf(fid,'1 \n');
fprintf(fid,'Maximum Amount of RAM per Processor [MB] \n');
fprintf(fid,'999999999 \n');
fprintf(fid,'ooooooooooo  REGULARIZATION DESCRIPTORS  ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo \n');
fprintf(fid,'Regularization Indicators [<TV> <SF> <TK> <MQ> <JW> <constraints> <CG residual> <VH> <McG> <soft prior>]: \n');
fprintf(fid,'.false.,.true.,.false.,.false.,.false.,.false.,.true.,.true.,.true.,.false. \n');
fprintf(fid,'Number of constant regularization iterations (final N iterations use final regularization weights) \n');
fprintf(fid,'30 \n');
fprintf(fid,'Number of Parameters to Treat with Total Variation: \n');
fprintf(fid,'3 \n');
fprintf(fid,'TV Parameter List: \n');
fprintf(fid,'1,2,3 \n');
fprintf(fid,'TV Delta Values: <1st line real, 2nd line imag> \n');
fprintf(fid,'1.d-19,1.d-19,1.d-19 \n');
fprintf(fid,'1.d-19,1.d-19,1.d-19 \n');
fprintf(fid,'TV Initial Weights: <1st line real, 2nd line imag> \n');
fprintf(fid,'5.d-16,5.d-16,5.d-16 \n');
fprintf(fid,'5.d-16,5.d-16,5.d-16 \n');
fprintf(fid,'TV Final Weights: <1st line real, 2nd line imag> \n');
fprintf(fid,'5.d-16,5.d-16,5.d-16 \n');
fprintf(fid,'5.d-16,5.d-16,5.d-16 \n');
fprintf(fid,'Number of Parameters to Treat with Spatial Filtering: \n');
fprintf(fid,'3 \n');
fprintf(fid,'SF Parameter List: \n');
fprintf(fid,'1,2,3 \n');
fprintf(fid,'SF Gaussian filter initial Widths: <1st line real, 2nd line imag> \n');
fprintf(fid,'0.003d0,0.003d0,0.003d0 \n');
fprintf(fid,'0.003d0,0.003d0,0.003d0 \n');
fprintf(fid,'SF Final Gaussian width: <1st line real, 2nd line imag> \n');
fprintf(fid,'0.0015d0,0.0015d0,0.0015d0 \n');
fprintf(fid,'0.0015d0,0.0015d0,0.0015d0 \n');
fprintf(fid,'Number of Parameters to Treat with Tikhonov Regularization: \n');
fprintf(fid,'3 \n');
fprintf(fid,'TK Parameter List: \n');
fprintf(fid,'1,2,3 \n');
fprintf(fid,'TK Initial Weights: <1st line real, 2nd line imag> \n');
fprintf(fid,'1.d-18,1.d-18,1.d-18 \n');
fprintf(fid,'1.d-18,1.d-18,1.d-18 \n');
fprintf(fid,'TK Final Weights: <1st line real, 2nd line imag> \n');
fprintf(fid,'1.d-18,1.d-18,1.d-18 \n');
fprintf(fid,'1.d-18,1.d-18,1.d-18 \n');
fprintf(fid,'Number of Parameters to Treat with Marquardt Regularization: \n');
fprintf(fid,'3 \n');
fprintf(fid,'Distance of alpha from 1 at which MQ weights are adjusted: \n');
fprintf(fid,'0.25d0 \n');
fprintf(fid,'MQ Parameter List: \n');
fprintf(fid,'1,2,3 \n');
fprintf(fid,'MQ Weight Delta: <1st line real, 2nd line imag> \n');
fprintf(fid,'0.5d0,0.5d0,0.5d0 \n');
fprintf(fid,'0.5d0,0.5d0,0.5d0 \n');
fprintf(fid,'MQ Initial Weights: <1st line real, 2nd line imag> \n');
fprintf(fid,'1.d2,1.d2,1.d2 \n');
fprintf(fid,'1.d2,1.d2,1.d2 \n');
fprintf(fid,'MQ Minimum Weights: <1st line real, 2nd line imag> \n');
fprintf(fid,'1.d-11,1.d-11,1.d-11 \n');
fprintf(fid,'1.d-11,1.d-11,1.d-11 \n');
fprintf(fid,'Number of Parameters to Treat with Joachimowicz Regularization: \n');
fprintf(fid,'3 \n');
fprintf(fid,'JW Parameter List: \n');
fprintf(fid,'1,2,3 \n');
fprintf(fid,'JW Initial Weights: <1st line real, 2nd line imag> \n');
fprintf(fid,'5.d0,5.d0,5.d0 \n');
fprintf(fid,'5.d0,5.d0,5.d0 \n');
fprintf(fid,'JW Final Weights: <1st line real, 2nd line imag> \n');
fprintf(fid,'5.d0,5.d0,5.d0 \n');
fprintf(fid,'5.d0,5.d0,5.d0 \n');
fprintf(fid,'Number of Parameters to Treat with Constraints: \n');
fprintf(fid,'3 \n');
fprintf(fid,'Constraint Parameter List: \n');
fprintf(fid,'1,2,3 \n');
fprintf(fid,'Constraint Weights <converges to exact solution as weight --> inf>: \n');
fprintf(fid,'1.d-14,1.d-14,1.d-14 \n');
fprintf(fid,'Constraint Minimums: \n');
fprintf(fid,'200.d0, 1.d0, 1000.d0, -5.d4, 1000.d0, 0.d0 \n');
fprintf(fid,'Constraint Maximums: \n');
fprintf(fid,'5.d5, 5.d5, 1000.d0, -1.d-2, 1.d12, 0.d0 \n');
fprintf(fid,'CG Residual Scaling Initial Weights: <1st line real, 2nd line imag> \n');
fprintf(fid,'0.04d0,0.04d0,0.04d0 \n');
fprintf(fid,'0.04d0,0.04d0,0.04d0 \n');
fprintf(fid,'CG Residual Scaling Final Weights: <1st line real, 2nd line imag> \n');
fprintf(fid,'0.01d0,0.01d0,0.01d0 \n');
fprintf(fid,'0.01d0,0.01d0,0.01d0 \n');
fprintf(fid,'Van Houten Regularization Level: \n');
fprintf(fid,'1.2d0 \n');
fprintf(fid,'Number of parameters to treat with soft prior: \n');
fprintf(fid,'3 \n');
fprintf(fid,'SP Parameter List: \n');
fprintf(fid,'1,2,3 \n');
fprintf(fid,'SP Initial Weights: <1st line real, 2nd line imag> \n');
fprintf(fid,'1.d-11,1.d-11,1.d-11 \n');
fprintf(fid,'1.d-11,1.d-11,1.d-11 \n');
fprintf(fid,'SP Final Weights: <1st line real, 2nd line imag> \n');
fprintf(fid,'1.d-11,1.d-11,1.d-11 \n');
fprintf(fid,'1.d-11,1.d-11,1.d-11 \n');
fprintf(fid,'SP start iteration delay (first N iterations do not use soft prior \n');
fprintf(fid,'0 \n');
fclose(fid);


% Build MRE-submit file
viscsubnamev7p3_noSP='MPICH2-Submitv7.3visc';
fid=fopen(viscsubnamev7p3_noSP,'w');
mvfiles(length(mvfiles)+1).name=viscsubnamev7p3_noSP;
fprintf(fid,'#!/bin/bash -l \n');
fprintf(fid,'# declare a name for this job \n');
fprintf(fid,'#PBS -N ');fprintf(fid,'%c',viscoutputfv7p3isoincomp_noSP);fprintf(fid,'\n');
fprintf(fid,'# request the queue (enter the possible names, if omitted, serial is the default) \n');
fprintf(fid,'#PBS -q default  \n');
fprintf(fid,'# request  node  \n');
fprintf(fid,'#PBS -l nodes=4:ppn=8 \n');
fprintf(fid,'#PBS -l feature=amd \n');
fprintf(fid,'# request some hours of wall time  \n');
fprintf(fid,'#PBS -l walltime=36:00:00  \n');
fprintf(fid,'#combine PBS standard output and error files  \n');
fprintf(fid,'#PBS -j oe  \n');
fprintf(fid,'# mail is sent to you when the job starts and when it terminates or aborts  \n');
fprintf(fid,'##PBS -m bea  \n');
fprintf(fid,'# specify your email address  \n');
fprintf(fid,'##PBS -M matthew.d.mcgarry@dartmouth.edu  \n');
fprintf(fid,'# Change to Submission Directory  \n');
fprintf(fid,'cd $PBS_O_WORKDIR  \n');
fprintf(fid,'# run the program \n');
fprintf(fid,'cat $PBS_NODEFILE | uniq > node_file \n');
fprintf(fid,'nnodes=$(cat node_file | wc -l) \n');
fprintf(fid,'nprocs=$(cat $PBS_NODEFILE | wc -l) \n');
fprintf(fid,'export MKL_NUM_THREADS=1 \n');
fprintf(fid,'echo Nodes $nnodes \n');
fprintf(fid,'echo Procs $nprocs \n');
fprintf(fid,'mpirun -np $nprocs -hostfile $PBS_NODEFILE /ihome/mmcgarry/code/MREv7p35/MRE-Zone.v7.35.discov ');fprintf(fid,'%c',[viscrfilev7p3_noSP]);fprintf(fid,'\n');
fprintf(fid,'exit 0  \n');
fclose(fid);
end